variable "name" {
  default = "{{.Name}}"
}

variable "region" {
  default = "{{.Region}}"
}

variable "address" {
  default = "{{.Address}}"
}

variable "instance_type" {
  default = "{{.InstanceType}}"
}

variable "ssh_public_key" {
  default = "{{.SshPubKey}}"
}

variable "ssh_private_key_path" {
  default = "{{.SshPriKeyPath}}"
}

variable "access_key" {
  default = "{{.AccessKey}}"
}

variable "secret_key" {
  default = "{{.SecretKey}}"
}

variable "port" {
  default = "{{.Port}}"
}

variable "path" {
  default = "{{.Path}}"
}

variable "allocation_id"{
  default = "{{.AllocationID}}"
}

provider "aws" {
  region     = "${var.region}"
  access_key = "${var.access_key}"
  secret_key = "${var.secret_key}"
}

data "aws_ami" "ubuntu" {
  most_recent = true

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-bionic-18.04-amd64-server-*"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }

  owners = ["099720109477"] # Canonical
}

resource "aws_security_group" "darknode" {
  name        = "falcon-sg-${var.address}"
  description = "Allow inbound SSH ,Republic Protocol traffic and logstash/kibana"

  // SSH
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  // Republic Protocol
  ingress {
    from_port   = 18514
    to_port     = 18515
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_key_pair" "darknode" {
  key_name   = "${var.name}"
  public_key = "${var.ssh_public_key}"
}

output "multiaddress" {
  value = "/ip4/${aws_instance.darknode.public_ip}/tcp/18514/republic/${var.address}"
}

{{if .AllocationID}}
resource "aws_eip_association" "eip_assoc" {
  instance_id   = "${aws_instance.darknode.id}"
  allocation_id = "${var.allocation_id}"

  provisioner "local-exec" {
    command = "echo /ip4/${aws_eip_association.eip_assoc.public_ip}/tcp/${var.port}/republic/${var.address} > multiAddress.out"
  }
}{{else}}{{end}}

resource "aws_instance" "darknode" {
  ami             = "${data.aws_ami.ubuntu.id}"
  instance_type   = "${var.instance_type}"
  key_name        = "${aws_key_pair.darknode.key_name}"
  security_groups = ["${aws_security_group.darknode.name}"]


  provisioner "remote-exec" {
    script = "${var.path}/scripts/init.sh"

    connection {
      type        = "ssh"
      user        = "ubuntu"
      private_key = "${file("${var.ssh_private_key_path}")}"
      host        = self.public_ip
    }
  }

  provisioner "file" {
    source      = "${var.path}/darknodes/${var.name}/config.json"
    destination = "$HOME/darknode-config.json"

    connection {
      type        = "ssh"
      user        = "darknode"
      private_key = "${file("${var.ssh_private_key_path}")}"
      host        = self.public_ip
    }
  }

  provisioner "remote-exec" {
    script = "${var.path}/scripts/install.sh"

    connection {
      type        = "ssh"
      user        = "darknode"
      private_key = "${file("${var.ssh_private_key_path}")}"
      host        = self.public_ip
    }
  }

  provisioner "local-exec" {
    command = "echo /ip4/${aws_instance.darknode.public_ip}/tcp/${var.port}/republic/${var.address} > multiAddress.out"
  }
}

